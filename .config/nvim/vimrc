set nocompatible

set termguicolors
syntax enable

scriptencoding utf-8
filetype plugin indent on

function! WildIgnore()
  if exists("g:wildignore")
    let &wildignore=g:wildignore
    unlet g:wildignore
  else
    let g:wildignore=&wildignore
    set wildignore=
  end

  set wildignore?
endfunction

function! OpenAllVisuallySelectedFiles()
  if line(".") == line("'>")
    execute "edit " . getline(".")
  else
    execute "edit " . getline(".") | b#
  endif
endfunction

function! s:Grep(args, ignore_git, force_case_sensitive)
  let l:save = &grepprg
  let l:grep_cmd = 'grep -n'
  let l:is_git_dir = system("git rev-parse >/dev/null 2>&1; printf $?") == 0

  if l:is_git_dir && !a:ignore_git
    let l:grep_cmd = 'git ' . l:grep_cmd
  else
    let l:grep_cmd = l:grep_cmd . ' -R'
  endif

  if !a:force_case_sensitive && !(a:args !=# tolower(a:args))
    let l:grep_cmd = l:grep_cmd . " -i"
  endif

  execute 'set grepprg=' . escape(l:grep_cmd, ' ')
  execute 'silent grep! ' . a:args . ' | cwindow | sleep 10m | redraw!'

  let &grepprg = l:save
endfunction

let g:loaded_getscriptPlugin = 1
let g:loaded_gzip = 1
let g:loaded_logiPat = 1
let g:loaded_matchit = 1
let g:loaded_netrwPlugin = 1
let g:loaded_rrhelper = 1
let g:loaded_tarPlugin = 1
let g:loaded_vimballPlugin = 1
let g:loaded_zipPlugin = 1

set autoread                          " Automatically read files that have been changed on disk
au CursorHold * checktime             " Needed for the set autoread

set showmatch                         " briefly jump to matching paren?
set shortmess+=TFat
set cursorline                        " Enable cursor line
set fileformat=unix                   " Prefered format
set fileformats=unix,dos,mac          " Preference list for file formats
set hidden                            " Enable multiple modified buffers
set laststatus=2                      " Shows the status bar all the time
set lazyredraw                        " macros don't update display
set modeline                          " Enable modelines (comments on first line)
set mouse=a                           " Enable Mouse
set nostartofline                     " Don't reset cursor to start of line when moving around
set noswapfile                        " Don't create a swap file (useless)
set ttimeoutlen=0
set nowrap                            " Don't wrap lines
set scrolloff=8                       " Minium number of lines above and below the cursor
set sidescrolloff=16                  " Minium number of characters left and right of the cursor
set hlsearch
set backspace=indent,eol,start        " bs anything
set scroll=10

set undofile                          " Use an undo file
set undodir=~/.vim/undo

set wildignorecase                    " When set case is ignored when completing file names and directories.
set wildmenu                          " Enhanced command line completion.
set wildmode=list:full                " Complete files using a menu AND list

set wildignore+=node_modules/**,build/**,bower_components/**,dist/**,.git/**

set suffixesadd+=.js
set path+=$PWD/node_modules

set expandtab                         " default to spaces instead of tabs
set tabstop=2                         " Set tab size
set shiftwidth=0                      " softtabs are 2 spaces for expandtab
set softtabstop=-1                    " Negative makes it follow tabstop

set iskeyword+=-,$,*
set ignorecase
set smartcase
set smarttab

set statusline=%f%q%m%r%=[%l/%L][%3c]%y

set list
set listchars=tab:→\ ,trail:·,extends:»,precedes:«,nbsp:⣿

set formatoptions=
set formatoptions+=c                  " Auto-wrap comments using textwidth
set formatoptions+=r                  " Continue comments by default
set formatoptions-=o                  " do not continue comment using o or O
set formatoptions+=q                  " continue comments with gq
set formatoptions-=a                  " auto-gq on type in comments?
set formatoptions+=n                  " Recognize numbered lists
set formatoptions+=2                  " Use indent from 2nd line of a paragraph
set formatoptions-=l                  " break lines that are already long?
set formatoptions+=1                  " Break before 1-letter words
set formatoptions+=j                  " When joining commented lines (J), avoid comment characters

if has('nvim')
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

nnoremap ; :
nnoremap * *N
nnoremap Y y$

nnoremap <silent> <BS> :noh<cr>
nnoremap <silent> <C-H> :noh<cr>

nnoremap cgf :e <cfile><CR>

nnoremap <C-B> :ls<cr>:b

nnoremap <silent> <C-N> :bn<CR>
nnoremap <silent> <C-P> :bp<CR>
nnoremap <silent> <C-C> :bp<CR>:bd#<CR>
nnoremap <C-X><C-C> :bd!#\|echo 'Force Closed! '.expand('#')<CR>

nnoremap <C-S> :%s//
xnoremap <C-S> y:%s/<C-R>=escape(@", '/.')<CR>/

nnoremap - o<Esc>"*p
xnoremap - "*p

cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

cnoremap <C-a> <Home>
cnoremap <C-e> <End>
nnoremap <silent> <F2> :call WildIgnore()<CR>

nnoremap s :let @*=@"<cr>:echo 'Stamped'<cr>
nnoremap <C-G> :Gls 

inoremap <c-x><right> <c-x><c-l>
cnoremap <c-x> <c-r>=getline('.')<CR>

let g:html_indent_tags = 'li\|p'

" Colors
set background=dark                     " Sets a dark background
let base16colorspace=256
colorscheme base16-default-dark

"set wildcharm=<c-z>
"cnoremap ss %s/

au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | execute "normal! g`\"zz" | endif
au BufReadPost * if !&diff && &filetype != 'gitcommit' && line("'\"") > 1 && line("'\"") <= line("$") | execute "normal! g`\"zz" | endif

au FileType gitcommit setlocal colorcolumn=51,73
au FileType gitcommit setlocal spell
au FileType gitcommit setlocal nocursorline

" Show cursor line only in active buffer
"augroup CursorLine
"  au!
"  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
"  au WinLeave * setlocal nocursorline
"augroup END

command! -nargs=* -bang -complete=dir Gls new|only|nnoremap <buffer> <C-C> :bw<cr>|set buftype=nofile|.!git ls-files <q-args>
command! -nargs=* -bang -complete=dir Gst new|only|nnoremap <buffer> <C-C> :bw<cr>|set buftype=nofile|.!git status -s <q-args>
command! Vimrc e ~/.vim/vimrc

xnoremap gf :call OpenAllVisuallySelectedFiles()<cr>:echo<cr>

command! -nargs=+ -bang -complete=dir Grep call s:Grep(<q-args>, <bang>0, 0)
command! -nargs=+ -bang -complete=dir WildIgnore call s:WildIgnore(<q-args>, <bang>0, 0)

set conceallevel=1
set concealcursor=nvic
hi Conceal guifg=#ff0000

set secure



